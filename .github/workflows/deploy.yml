name: Deploy to Home Server

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'go-environment'
        type: choice
        options:
        - go-environment
        - go-environment-staging
        - go-environment-test

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: go-environment
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        echo "Adding server ${{ vars.HOME_SERVER_IP }} to known hosts..."
        if [ -z "${{ vars.HOME_SERVER_IP }}" ]; then
          echo "Error: HOME_SERVER_IP is not set"
          exit 1
        fi
        
        # Get SSH host key from custom port 2222
        ssh-keyscan -H -p 2222 ${{ vars.HOME_SERVER_IP }} >> ~/.ssh/known_hosts
        
    - name: Deploy to Docker Swarm
      run: |
        # Create .env file locally first
        echo "üîç Checking environment variables:"
        
        # Check if required secrets are set
        if [ -z "${{ secrets.GRAFANA_ADMIN_PASSWORD }}" ]; then
          echo "‚ùå Error: GRAFANA_ADMIN_PASSWORD secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.POSTGRES_PASSWORD }}" ]; then
          echo "‚ùå Error: POSTGRES_PASSWORD secret is not set"
          exit 1
        fi
        
        # Check if required variables are set
        if [ -z "${{ vars.POSTGRES_USER }}" ]; then
          echo "‚ùå Error: POSTGRES_USER variable is not set"
          exit 1
        fi
        if [ -z "${{ vars.POSTGRES_DB }}" ]; then
          echo "‚ùå Error: POSTGRES_DB variable is not set"
          exit 1
        fi
        
        echo "‚úÖ All required environment variables are set:"
        echo "GRAFANA_ADMIN_PASSWORD: [HIDDEN]"
        echo "POSTGRES_PASSWORD: [HIDDEN]"
        echo "POSTGRES_USER: ${{ vars.POSTGRES_USER }}"
        echo "POSTGRES_DB: ${{ vars.POSTGRES_DB }}"
        
        # Create .env file with secrets and variables
        echo "GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}" > .env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
        echo "POSTGRES_USER=${{ vars.POSTGRES_USER }}" >> .env
        echo "POSTGRES_DB=${{ vars.POSTGRES_DB }}" >> .env
        
        echo "üìÅ Created .env file (passwords hidden):"
        sed 's/=.*/=***/' .env
        
        # Copy .env file to server
        scp -P 2222 .env ${{ vars.SSH_USER }}@${{ vars.HOME_SERVER_IP }}:/home/go-environment/
        
        # Deploy using the deployment script
        ssh -p 2222 ${{ vars.SSH_USER }}@${{ vars.HOME_SERVER_IP }} << 'EOF'
          # Create project directory if it doesn't exist
          sudo mkdir -p /home/go-environment
          sudo chown ${{ vars.SSH_USER }}:${{ vars.SSH_USER }} /home/go-environment
          
          # Go to project directory
          cd /home/go-environment
          
          # Setup Git configuration for GitHub
          echo "üîë Setting up Git configuration..."
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Check if .env file exists and show its content (passwords hidden)
          echo "üìÅ Checking .env file on server:"
          if [ -f ".env" ]; then
            echo "‚úÖ .env file found (passwords hidden):"
            sed 's/=.*/=***/' .env
          else
            echo "‚ùå .env file not found on server!"
            exit 1
          fi
          
          # Force clean clone - remove everything and clone fresh
          echo "üßπ Cleaning directory and cloning repository..."
          rm -rf * .git* .env 2>/dev/null || true
          git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/ingvarmattis/go-environment.git .
          
          # Verify repository was cloned
          if [ ! -f "docker/docker-swarm.yaml" ]; then
            echo "‚ùå Repository files not found after clone!"
            exit 1
          fi
          
          echo "‚úÖ Repository cloned successfully"
          
          # Restore .env file after clone
          echo "üìÅ Restoring .env file..."
          echo "GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}" > .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_USER=${{ vars.POSTGRES_USER }}" >> .env
          echo "POSTGRES_DB=${{ vars.POSTGRES_DB }}" >> .env
          echo "‚úÖ .env file restored"
          
          # Create necessary data directories in /data/fast if they don't exist
          echo "üìÅ Creating data directories..."
          if [ ! -d "/data/fast/prometheus_data" ]; then
            sudo mkdir -p /data/fast/prometheus_data
            sudo chown -R 1000:1000 /data/fast/prometheus_data
          fi
          if [ ! -d "/data/fast/grafana_data" ]; then
            sudo mkdir -p /data/fast/grafana_data
            sudo chown -R 1000:1000 /data/fast/grafana_data
          fi
          if [ ! -d "/data/fast/postgres_data" ]; then
            sudo mkdir -p /data/fast/postgres_data
            sudo chown -R 1000:1000 /data/fast/postgres_data
          fi
          if [ ! -d "/data/fast/tempo_data" ]; then
            sudo mkdir -p /data/fast/tempo_data
            sudo chown -R 1000:1000 /data/fast/tempo_data
          fi
          if [ ! -d "/data/fast/technitium-dns-data/zones" ]; then
            sudo mkdir -p /data/fast/technitium-dns-data/zones
            sudo chown -R 1000:1000 /data/fast/technitium-dns-data
          fi
          if [ ! -d "/data/fast/torrserver_data" ]; then
            sudo mkdir -p /data/fast/torrserver_data
            sudo chown -R 1000:1000 /data/fast/torrserver_data
          fi
          if [ ! -d "/data/fast/torrserver_cache" ]; then
            sudo mkdir -p /data/fast/torrserver_cache
            sudo chown -R 1000:1000 /data/fast/torrserver_cache
          fi
          echo "‚úÖ Data directories created/verified"
          
          # Copy necessary configs to data directories
          echo "üìã Copying configs to data directories..."
          
          # Copy DNS zones to Technitium DNS data directory
          if [ -d "configs/technitium-dns" ]; then
            sudo cp -r configs/technitium-dns/* /data/fast/technitium-dns-data/ 2>/dev/null || echo "‚ö†Ô∏è No Technitium DNS configs found"
          fi
          
          # Create default DNS zones if none exist
          if [ ! -f "/data/fast/technitium-dns-data/zones/example.com.json" ]; then
            sudo mkdir -p /data/fast/technitium-dns-data/zones
            echo '{"name":"example.com","zoneType":"Primary","primaryNameServer":"ns1.example.com","adminEmailAddress":"admin@example.com","zoneFile":"$ORIGIN example.com.\n$TTL 3600\n@ IN SOA ns1.example.com. admin.example.com. 2024010101 3600 1800 1209600 3600\n@ IN NS ns1.example.com.\n@ IN A 127.0.0.1\nns1 IN A 127.0.0.1"}' | sudo tee /data/fast/technitium-dns-data/zones/example.com.json > /dev/null
            sudo chown -R 1000:1000 /data/fast/technitium-dns-data/zones
          fi
          
          echo "‚úÖ Configs copied to data directories"
          
          # Create shared external network for inter-stack communication
          docker network create --driver overlay --attachable shared-network 2>/dev/null || true
          
          # Make deployment script executable and run it
          chmod +x scripts/deploy-with-env.sh
          ./scripts/deploy-with-env.sh
          
          # Deploy Docker Swarm stack
          docker stack deploy -c docker/docker-swarm.yaml go-environment
          
          # Wait for services to start
          sleep 30
          
          # Check service status and logs for failed services
          docker stack services go-environment
          
          # Check logs for services that might have failed
          docker service logs go-environment_prometheus --tail 20 2>/dev/null || echo "‚ùå Cannot get Prometheus logs"
          docker service logs go-environment_grafana --tail 20 2>/dev/null || echo "‚ùå Cannot get Grafana logs"
          docker service logs go-environment_postgres --tail 20 2>/dev/null || echo "‚ùå Cannot get Postgres logs"
          docker service logs go-environment_tempo --tail 20 2>/dev/null || echo "‚ùå Cannot get TorrServer logs"
          docker service logs go-environment_nginx --tail 20 2>/dev/null || echo "‚ùå Cannot get Nginx logs"
          docker service logs go-environment_torrserver --tail 20 2>/dev/null || echo "‚ùå Cannot get TorrServer logs"
        EOF
        
    - name: Health Check
      run: |
        ssh -p 2222 ${{ vars.SSH_USER }}@${{ vars.HOME_SERVER_IP }} << 'EOF'
          sleep 60
          docker stack services go-environment
          curl -f http://localhost:9090/-/healthy || exit 1
          curl -f http://localhost:3000/api/health || exit 1
        EOF
