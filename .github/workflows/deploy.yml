name: Deploy to Home Server

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'go-environment'
        type: choice
        options:
        - go-environment
        - go-environment-staging
        - go-environment-test

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: go-environment
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        echo "Adding server ${{ vars.HOME_SERVER_IP }} to known hosts..."
        if [ -z "${{ vars.HOME_SERVER_IP }}" ]; then
          echo "Error: HOME_SERVER_IP is not set"
          exit 1
        fi
        
        # Get SSH host key from custom port 2222
        ssh-keyscan -H -p 2222 ${{ vars.HOME_SERVER_IP }} >> ~/.ssh/known_hosts
        
    - name: Deploy to Docker Swarm
      run: |
        # Create .env file locally first
        echo "🔍 Checking environment variables:"
        
        # Check if required secrets are set
        if [ -z "${{ secrets.GRAFANA_ADMIN_PASSWORD }}" ]; then
          echo "❌ Error: GRAFANA_ADMIN_PASSWORD secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.POSTGRES_PASSWORD }}" ]; then
          echo "❌ Error: POSTGRES_PASSWORD secret is not set"
          exit 1
        fi
        
        # Check if required variables are set
        if [ -z "${{ vars.POSTGRES_USER }}" ]; then
          echo "❌ Error: POSTGRES_USER variable is not set"
          exit 1
        fi
        if [ -z "${{ vars.POSTGRES_DB }}" ]; then
          echo "❌ Error: POSTGRES_DB variable is not set"
          exit 1
        fi
        
        echo "✅ All required environment variables are set:"
        echo "GRAFANA_ADMIN_PASSWORD: [HIDDEN]"
        echo "POSTGRES_PASSWORD: [HIDDEN]"
        echo "POSTGRES_USER: ${{ vars.POSTGRES_USER }}"
        echo "POSTGRES_DB: ${{ vars.POSTGRES_DB }}"
        
        # Create .env file with secrets and variables
        cat > .env << ENVEOF
        GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_USER=${{ vars.POSTGRES_USER }}
        POSTGRES_DB=${{ vars.POSTGRES_DB }}
        ENVEOF
        
        echo "📁 Created .env file (passwords hidden):"
        sed 's/=.*/=***/' .env
        
        # Copy .env file to server
        scp -P 2222 .env ${{ vars.SSH_USER }}@${{ vars.HOME_SERVER_IP }}:/home/go-environment/
        
        # Copy SSH key for GitHub access
        echo "🔑 Copying SSH key for GitHub access..."
        ssh -p 2222 ${{ vars.SSH_USER }}@${{ vars.HOME_SERVER_IP }} "mkdir -p ~/.ssh"
        scp -P 2222 ~/.ssh/id_rsa ${{ vars.SSH_USER }}@${{ vars.HOME_SERVER_IP }}:~/.ssh/id_rsa
        ssh -p 2222 ${{ vars.SSH_USER }}@${{ vars.HOME_SERVER_IP }} "chmod 600 ~/.ssh/id_rsa"
        
        # Deploy using the deployment script
        ssh -p 2222 ${{ vars.SSH_USER }}@${{ vars.HOME_SERVER_IP }} << 'EOF'
          # Create project directory if it doesn't exist
          sudo mkdir -p /home/go-environment
          sudo chown ${{ vars.SSH_USER }}:${{ vars.SSH_USER }} /home/go-environment
          
          # Go to project directory
          cd /home/go-environment
          
          # Setup GitHub SSH access
          echo "🔑 Setting up GitHub SSH access..."
          mkdir -p ~/.ssh
          echo "github.com,140.82.112.3 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvOqTsVpzRh0pFnc+OsmTBOaEhtG7Jl87nXggsradZoTmPnvz46wHn5jW0GlBwZTRlYwJIl==" >> ~/.ssh/known_hosts
          echo "github.com,140.82.112.4 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvOqTsVpzRh0pFnc+OsmTBOaEhtG7Jl87nXggsradZoTmPnvz46wHn5jW0GlBwZTRlYwJIl==" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          
          # Setup Git configuration
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Start SSH agent and add key
          echo "🔑 Starting SSH agent..."
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa
          
          # Check if .env file exists and show its content (passwords hidden)
          echo "📁 Checking .env file on server:"
          if [ -f ".env" ]; then
            echo "✅ .env file found (passwords hidden):"
            sed 's/=.*/=***/' .env
          else
            echo "❌ .env file not found on server!"
            exit 1
          fi
          
          # Force clean clone - remove everything and clone fresh
          echo "🧹 Cleaning directory and cloning repository..."
          rm -rf * .git* .env 2>/dev/null || true
          git clone git@github.com:ingvarmattis/go-environment.git .
          
          # Verify repository was cloned
          if [ ! -f "docker/docker-swarm.yaml" ]; then
            echo "❌ Repository files not found after clone!"
            exit 1
          fi
          
          echo "✅ Repository cloned successfully"
          
          # Show what was cloned
          echo "📁 Repository contents after clone:"
          ls -la
          echo "📁 Docker directory contents:"
          ls -la docker/
          
          # Create necessary data directories
          sudo mkdir -p /data/fast/{prometheus_data,grafana_data,postgres_data,tempo_data,technitium-dns-data/zones,torrserver_data,torrserver_cache}
          sudo chown -R 1000:1000 /data/fast/
          
          # Make deployment script executable and run it
          chmod +x scripts/deploy-with-env.sh
          ./scripts/deploy-with-env.sh
          
          # Deploy Docker Swarm stack
          echo "🚀 Deploying Docker Swarm stack..."
          echo "📁 Current directory: $(pwd)"
          echo "📁 Listing files:"
          ls -la
          echo "📁 Docker directory contents:"
          ls -la docker/
          echo "📁 Environment variables (passwords hidden):"
          sed 's/=.*/=***/' .env
          echo "🐳 Docker Swarm status:"
          docker info | grep Swarm
          echo "🚀 Starting deployment..."
          echo "📁 Checking Docker Swarm file:"
          ls -la docker/
          echo "📁 Docker Swarm file content (first 20 lines):"
          head -20 docker/docker-swarm.yaml
          echo "🚀 Deploying stack..."
          docker stack deploy -c docker/docker-swarm.yaml go-environment
          echo "✅ Deployment completed"
          echo "📊 Stack status:"
          docker stack ls
          echo "📊 Services status:"
          docker stack services go-environment
        EOF
        
    - name: Health Check
      run: |
        ssh -p 2222 ${{ vars.SSH_USER }}@${{ vars.HOME_SERVER_IP }} << 'EOF'
          # Wait for services to start
          sleep 30
          
          # Check services status
          docker stack services ${{ github.event.inputs.environment || 'go-environment' }}
          
          # Check availability of main services
          echo "Checking service availability..."
          
          # Prometheus
          if curl -f http://localhost:9090/-/healthy; then
            echo "✅ Prometheus is healthy"
          else
            echo "❌ Prometheus health check failed"
            exit 1
          fi
          
          # Grafana
          if curl -f http://localhost:3000/api/health; then
            echo "✅ Grafana is healthy"
          else
            echo "❌ Grafana health check failed"
            exit 1
          fi
          
          echo "All services are healthy! 🎉"
        EOF
