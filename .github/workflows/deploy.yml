name: Deploy to Home Server

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'go-environment'
        type: choice
        options:
        - go-environment
        - go-environment-staging
        - go-environment-test

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: go-environment
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        echo "Adding server ${{ vars.HOME_SERVER_IP }} to known hosts..."
        if [ -z "${{ vars.HOME_SERVER_IP }}" ]; then
          echo "Error: HOME_SERVER_IP is not set"
          exit 1
        fi
        
        # Get SSH host key from custom port 2222
        ssh-keyscan -H -p 2222 ${{ vars.HOME_SERVER_IP }} >> ~/.ssh/known_hosts
        
    - name: Deploy to Docker Swarm
      run: |
        # Create .env file locally first
        echo "üîç Checking environment variables:"
        
        # Check if required secrets are set
        if [ -z "${{ secrets.GRAFANA_ADMIN_PASSWORD }}" ]; then
          echo "‚ùå Error: GRAFANA_ADMIN_PASSWORD secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.POSTGRES_PASSWORD }}" ]; then
          echo "‚ùå Error: POSTGRES_PASSWORD secret is not set"
          exit 1
        fi
        
        # Check if required variables are set
        if [ -z "${{ vars.POSTGRES_USER }}" ]; then
          echo "‚ùå Error: POSTGRES_USER variable is not set"
          exit 1
        fi
        if [ -z "${{ vars.POSTGRES_DB }}" ]; then
          echo "‚ùå Error: POSTGRES_DB variable is not set"
          exit 1
        fi
        
        echo "‚úÖ All required environment variables are set:"
        echo "GRAFANA_ADMIN_PASSWORD: [HIDDEN]"
        echo "POSTGRES_PASSWORD: [HIDDEN]"
        echo "POSTGRES_USER: ${{ vars.POSTGRES_USER }}"
        echo "POSTGRES_DB: ${{ vars.POSTGRES_DB }}"
        
        # Create .env file with secrets and variables
        echo "GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}" > .env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
        echo "POSTGRES_USER=${{ vars.POSTGRES_USER }}" >> .env
        echo "POSTGRES_DB=${{ vars.POSTGRES_DB }}" >> .env
        
        echo "üìÅ Created .env file (passwords hidden):"
        sed 's/=.*/=***/' .env
        
        # Copy .env file to server
        scp -P 2222 .env ${{ vars.SSH_USER }}@${{ vars.HOME_SERVER_IP }}:/home/go-environment/
        
        # Deploy using the deployment script
        ssh -p 2222 ${{ vars.SSH_USER }}@${{ vars.HOME_SERVER_IP }} << 'EOF'
          # Create project directory if it doesn't exist
          sudo mkdir -p /home/go-environment
          sudo chown ${{ vars.SSH_USER }}:${{ vars.SSH_USER }} /home/go-environment
          
          # Go to project directory
          cd /home/go-environment
          
          # Setup Git configuration for GitHub
          echo "üîë Setting up Git configuration..."
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Check if .env file exists and show its content (passwords hidden)
          echo "üìÅ Checking .env file on server:"
          if [ -f ".env" ]; then
            echo "‚úÖ .env file found (passwords hidden):"
            sed 's/=.*/=***/' .env
          else
            echo "‚ùå .env file not found on server!"
            exit 1
          fi
          
          # Force clean clone - remove everything and clone fresh
          echo "üßπ Cleaning directory and cloning repository..."
          rm -rf * .git* .env 2>/dev/null || true
          git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/ingvarmattis/go-environment.git .
          
          # Verify repository was cloned
          if [ ! -f "docker/docker-swarm.yaml" ]; then
            echo "‚ùå Repository files not found after clone!"
            exit 1
          fi
          
          echo "‚úÖ Repository cloned successfully"
          
          # Restore .env file after clone
          echo "üìÅ Restoring .env file..."
          echo "GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}" > .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_USER=${{ vars.POSTGRES_USER }}" >> .env
          echo "POSTGRES_DB=${{ vars.POSTGRES_DB }}" >> .env
          echo "‚úÖ .env file restored"
          
          # Show what was cloned
          echo "üìÅ Repository contents after clone:"
          ls -la
          echo "üìÅ Docker directory contents:"
          ls -la docker/
          
          # Create necessary data directories
          echo "üìÅ Creating data directories..."
          sudo mkdir -p /data/fast/{prometheus_data,grafana_data,postgres_data,tempo_data,technitium-dns-data/zones,torrserver_data,torrserver_cache}
          sudo chown -R 1000:1000 /data/fast/
          
          # Verify directory permissions
          echo "üîç Checking directory permissions..."
          ls -la /data/fast/
          echo "üîç Checking directory ownership..."
          ls -la /data/fast/ | grep -E "(prometheus_data|grafana_data|postgres_data|tempo_data|torrserver_data|torrserver_cache)"
          
          # Make deployment script executable and run it
          chmod +x scripts/deploy-with-env.sh
          ./scripts/deploy-with-env.sh
          
          # Deploy Docker Swarm stack
          echo "üöÄ Deploying Docker Swarm stack..."
          echo "üìÅ Current directory: $(pwd)"
          echo "üìÅ Listing files:"
          ls -la
          echo "üìÅ Docker directory contents:"
          ls -la docker/
          echo "üìÅ Environment variables (passwords hidden):"
          sed 's/=.*/=***/' .env
          echo "üê≥ Docker Swarm status:"
          docker info | grep Swarm
          echo "üöÄ Starting deployment..."
          echo "üìÅ Checking Docker Swarm file:"
          ls -la docker/
          
          # Check if required images are available
          echo "üê≥ Checking Docker images availability..."
          docker images | grep -E "(grafana|prometheus|postgres|tempo|nginx|torrserver|technitium|node-exporter|postgres-exporter)" || echo "‚ö†Ô∏è Some images not found locally"
          echo "üìÅ Docker Swarm file content (first 20 lines):"
          head -20 docker/docker-swarm.yaml
          
          # Validate Docker Swarm file
          echo "üîç Validating Docker Swarm file..."
          if docker-compose -f docker/docker-swarm.yaml config >/dev/null 2>&1; then
            echo "‚úÖ Docker Swarm file is valid"
          else
            echo "‚ùå Docker Swarm file has syntax errors!"
            echo "üìã Full file content:"
            cat docker/docker-swarm.yaml
            exit 1
          fi
          
          echo "üöÄ Deploying stack..."
          docker stack deploy -c docker/docker-swarm.yaml go-environment
          echo "‚úÖ Deployment completed"
          echo "üìä Stack status:"
          docker stack ls
          echo "üìä Services status:"
          docker stack services go-environment
          
          # Wait a bit and check service logs for failed services
          echo "‚è≥ Waiting for services to start..."
          sleep 30
          
          echo "üìä Checking service status and logs..."
          docker stack services go-environment
          
          # Check logs for services that might have failed
          echo "üìã Checking service logs for potential failures..."
          docker service logs go-environment_prometheus --tail 20 2>/dev/null || echo "‚ùå Cannot get Prometheus logs"
          docker service logs go-environment_grafana --tail 20 2>/dev/null || echo "‚ùå Cannot get Grafana logs"
          docker service logs go-environment_postgres --tail 20 2>/dev/null || echo "‚ùå Cannot get Postgres logs"
          docker service logs go-environment_tempo --tail 20 2>/dev/null || echo "‚ùå Cannot get Tempo logs"
          docker service logs go-environment_nginx --tail 20 2>/dev/null || echo "‚ùå Cannot get Nginx logs"
          docker service logs go-environment_torrserver --tail 20 2>/dev/null || echo "‚ùå Cannot get TorrServer logs"
        EOF
        
    - name: Health Check
      run: |
        ssh -p 2222 ${{ vars.SSH_USER }}@${{ vars.HOME_SERVER_IP }} << 'EOF'
          # Wait for services to start
          echo "‚è≥ Waiting for services to start..."
          sleep 60
          
          # Check Docker Swarm services status
          echo "üìä Checking Docker Swarm services status..."
          docker stack services go-environment
          
          # Check if services are running
          echo "üîç Checking if services are running..."
          docker service ls --filter "label=com.docker.stack.namespace=go-environment"
          
          # Check services status
          docker stack services ${{ github.event.inputs.environment || 'go-environment' }}
          
          # Check availability of main services
          echo "Checking service availability..."
          
          # Prometheus
          if curl -f http://localhost:9090/-/healthy; then
            echo "‚úÖ Prometheus is healthy"
          else
            echo "‚ùå Prometheus health check failed"
            exit 1
          fi
          
          # Grafana
          if curl -f http://localhost:3000/api/health; then
            echo "‚úÖ Grafana is healthy"
          else
            echo "‚ùå Grafana health check failed"
            exit 1
          fi
          
          echo "All services are healthy! üéâ"
        EOF
